<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - :#/ Gioele SL Fierro</title><link>http://gslf.it/posts/</link><description>All Posts | :#/ Gioele SL Fierro</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>hck@gslf.it (GioeleSLFierro)</managingEditor><webMaster>hck@gslf.it (GioeleSLFierro)</webMaster><copyright>Gioele SL Fierro 2021 ©.</copyright><lastBuildDate>Sun, 21 Aug 2022 18:08:38 +0200</lastBuildDate><atom:link href="http://gslf.it/posts/" rel="self" type="application/rss+xml"/><item><title>[NLP] How to clean and tokenize text in python</title><link>http://gslf.it/nlp-tokenization/</link><pubDate>Sun, 21 Aug 2022 18:08:38 +0200</pubDate><author>Author</author><guid>http://gslf.it/nlp-tokenization/</guid><description>Prepare text for NLP Natural Language Processing allows machines to interpret text, but to perform this task in the best possible way it is necessary to sort and clean the text, so as to make it &amp;ldquo;understandable&amp;rdquo; to the algorithm. For simplicity we divide this complex task into two simpler ones, first we will take care of cleaning the text and then dividing it into tokens.
Step 1: Clean text Often the text to be processed comes from the web, so the first thing to do is remove all the HTML tags.</description></item><item><title>Python RegEx for NLP</title><link>http://gslf.it/regex-nlp/</link><pubDate>Fri, 05 Aug 2022 22:08:38 +0200</pubDate><author>Author</author><guid>http://gslf.it/regex-nlp/</guid><description>RegEx for NLP Natural Language Processing requires advanced manipulation of the text strings you intend to process. To allow a machine to understand human language it is necessary to divide and group the various elements that compose it; RegEx are the ideal tool to do this. This article, which I will continue to update over time, lists some of the most useful RegEx for NLP, with sample code attached.
Remove Digits: How to remove numbers with regex:</description></item><item><title>RegEx in python</title><link>http://gslf.it/regex-python/</link><pubDate>Fri, 05 Aug 2022 22:08:38 +0200</pubDate><author>Author</author><guid>http://gslf.it/regex-python/</guid><description>What is a RegEx A RegEx (Regular Expression) is a powerfull tool for search and extract patterns in text, and is fundamental for NLP (Natural Language Processing). The scope of this tool is very broad, ranging from web scraping to Big Data analysis systems. The standard Python library integrates the re module which contains everything needed to use RegEx.
RegEx functions To use a RegEx in python just import the ** re ** module and use one of the functions available to search for patterns.</description></item><item><title>[NLP] Phrases Classification</title><link>http://gslf.it/nlp-phrases-classification/</link><pubDate>Sat, 16 Jul 2022 18:16:43 +0200</pubDate><author>Author</author><guid>http://gslf.it/nlp-phrases-classification/</guid><description>Intro Proper ordering and proper classification of sentences is critical to enabling machines to interpret human language. The phrases classification is therefore one of the founding pillars of NLP (Natural Language Processing). We now define five main categories of phrases that are valid in the English language (but not only), with the help of the Cambridge Dictionary.
Phrase classes NOUN PHRASE (NP) A noun phrase consists of a noun or pronoun, which is called the head, and any dependent words before or after the head.</description></item><item><title>[NLP] Pos Analysis</title><link>http://gslf.it/nlp-pos-analysis/</link><pubDate>Sat, 21 May 2022 15:31:07 +0200</pubDate><author>Author</author><guid>http://gslf.it/nlp-pos-analysis/</guid><description>Intro To allow a machine to understand human language, the components of each sentence must be categorized. One of the basic classification systems is the POS (part-of-speach), natively integrated into the nltk library. These tags give each component of the sentence a grammatical meaning.
NLTK POS tags: Abbreviation Meaning CC coordinating conjunction CD cardinal digit DT determiner EX existential there FW foreign word IN preposition/subordinating conjunction JJ This NLTK POS Tag is an adjective (large) JJR adjective, comparative (larger) JJS adjective, superlative (largest) LS list market MD modal (could, will) NN noun, singular (cat, tree) NNS noun plural (desks) NNP proper noun, singular (sarah) NNPS proper noun, plural (indians or americans) PDT predeterminer (all, both, half) POS possessive ending (parent\ ‘s) PRP personal pronoun (hers, herself, him, himself) PRP$ possessive pronoun (her, his, mine, my, our ) RB adverb (occasionally, swiftly) RBR adverb, comparative (greater) RBS adverb, superlative (biggest) RP particle (about) TO infinite marker (to) UH interjection (goodbye) VB verb (ask) VBG verb gerund (judging) VBD verb past tense (pleaded) VBN verb past participle (reunified) VBP verb, present tense not 3rd person singular(wrap) VBZ verb, present tense with 3rd person singular (bases) WDT wh-determiner (that, what) WP wh- pronoun (who) WRB wh- adverb (how) Code Let&amp;rsquo;s do a test with a short script.</description></item><item><title>[NLP] nltk Downloader</title><link>http://gslf.it/nlp-nltk-downloader/</link><pubDate>Sat, 23 Apr 2022 15:49:13 +0200</pubDate><author>Author</author><guid>http://gslf.it/nlp-nltk-downloader/</guid><description><![CDATA[The nltk library of python3 comes with a useful downloader with a graphical interface for managing packages.
Unfortunately, if you try to start the downloader GUI from Mac or if you launch the download function via CLI, you will see an error like this:
1 2 3 4 5 &gt;&gt; nltk.download(&#39;averaged_perceptron_tagger&#39;) [nltk_data] Error loading averaged_perceptron_tagger: &lt;urlopen error [SSL: [nltk_data] CERTIFICATE_VERIFY_FAILED] certificate verify failed [nltk_data] (_ssl.c:590)&gt; False To solve this, you need to create an SSL context that is considered valid.]]></description></item><item><title>Go Types and Variable Declaration</title><link>http://gslf.it/go_types/</link><pubDate>Thu, 16 Dec 2021 21:49:58 +0100</pubDate><author>Author</author><guid>http://gslf.it/go_types/</guid><description>Go is a strongly typed language: it is necessary to specify the type for each declared variable. In go the basic types available to the programmer are:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // Boolean [ true or false ] bool // String [ &amp;#34;Example&amp;#34; ] string // Integer numbers [ 0, -1, 100, -1000, ... ] int int8 int16 int32 int64 // Unsigned integer numbers [ 0, 1, 100, 1000, .</description></item><item><title>Go Brackets</title><link>http://gslf.it/go-brackets/</link><pubDate>Sun, 07 Nov 2021 19:08:24 +0100</pubDate><author>Author</author><guid>http://gslf.it/go-brackets/</guid><description><![CDATA[There is little agreement among developers about how the brackets should be used. There are basically three ways to write a block of code with languages that require curly brackets.
STYLE 1
1 2 3 if response == True{ return &#34;OK&#34;; } STYLE 2
1 2 3 4 if response == True { return &#34;OK&#34;; } STYLE 3
1 2 if response == True return &#34;OK&#34;; Countless words have been spent to prove one or the other faction right.]]></description></item><item><title>[MachineLearning] How to build a spam classifier</title><link>http://gslf.it/mlnaivespamclassifier/</link><pubDate>Sat, 09 Oct 2021 18:44:20 +0200</pubDate><author>Author</author><guid>http://gslf.it/mlnaivespamclassifier/</guid><description>Detecting Spam messages is one of the first tasks assigned to Machine Learning algorithms, and Bayesian classifiers are the perfect choice for this job. Let’s see more about Machine Learning spam detection with a little bit of theory and fully functional implementation in Python.
Bayes’ theorem is a cornerstone of statistics, it correlates the conditional probability (prior probability) of an event to the probability measure (posterior probabilities) of the same event.</description></item><item><title>Starting learning Go – a journey for developers</title><link>http://gslf.it/learninggo/</link><pubDate>Sat, 09 Oct 2021 18:40:49 +0200</pubDate><author>Author</author><guid>http://gslf.it/learninggo/</guid><description>I have been a professional software developer for more than fifteen years. I’m proficient in C/C++ and Python. I know Javascript (with some framework) and Java well. The last language I learned to use (10 years ago) is Python.
After all this time, I had to test myself again with a new language to learn from scratch. I have been cultivating this idea for a long time because I have very little time available due to my working commitments with Globsit.</description></item></channel></rss>